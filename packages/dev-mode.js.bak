import {spawn} from 'node:child_process';
import {createServer} from 'vite';
import electronPath from 'electron';
import {join, resolve} from 'node:path';
import {fileURLToPath} from 'node:url';

const __dirname = fileURLToPath(new URL('.', import.meta.url));

/**
 * @type {import('vite').InlineConfig}
 */
const sharedConfig = {
  mode: 'development',
  build: {watch: {}},
};

/**
 * @type {import('vite').InlineConfig}
 */
const rendererConfig = {
  ...sharedConfig,
  configFile: resolve(__dirname, 'renderer/vite.config.ts'),
  plugins: [
    {
      name: '@app/renderer-watch-server-provider',
      configureServer(server) {
        server.httpServer?.once('listening', () => {
          /**
           * @type {import('vite').ViteDevServer}
           */
          rendererWatchServer = server;
        });
      },
      api: {
        provideRendererWatchServer() {
          return rendererWatchServer;
        },
      },
    },
  ],
};

/**
 * @type {import('vite').InlineConfig}
 */
const preloadConfig = {
  ...sharedConfig,
  configFile: resolve(__dirname, 'preload/vite.config.js'),
  plugins: [
    {
      name: '@app/renderer-watch-server-provider',
      api: {
        provideRendererWatchServer() {
          return rendererWatchServer;
        },
      },
    },
  ],
};

/**
 * @type {import('vite').InlineConfig}
 */
const mainConfig = {
  ...sharedConfig,
  configFile: resolve(__dirname, 'main/vite.config.js'),
  plugins: [
    {
      name: '@app/renderer-watch-server-provider',
      api: {
        provideRendererWatchServer() {
          return rendererWatchServer;
        },
      },
    },
  ],
  define: {
    'import.meta.env.VITE_APP_VERSION': JSON.stringify(process.env.npm_package_version || '0.0.0'),
  },
};

/**
 * @type {import('vite').ViteDevServer}
 */
let rendererWatchServer;

/**
 * Create a dev server for Vite.
 * @param {import('vite').InlineConfig} config
 * @returns {Promise<import('vite').ViteDevServer>}
 */
function createDevServer(config) {
  return createServer(config);
}

/**
 * @param {import('vite').ViteDevServer} server
 * @returns {Promise<import('vite').RollupOutput | null>}
 */
function build(server) {
  return server.pluginContainer.buildStart({}) && server.getBuildData();
}

/**
 * @param {import('vite').ViteDevServer} server
 */
async function startDevServer(server) {
  await server.listen();
  server.printUrls();
}

(async () => {
  try {
    const rendererServer = await createDevServer(rendererConfig);
    const preloadServer = await createDevServer(preloadConfig);
    const mainServer = await createDevServer(mainConfig);

    await startDevServer(rendererServer);
    await build(preloadServer);
    await build(mainServer);

    const electronProcess = spawn(
      electronPath,
      [join(__dirname, 'entry-point.mjs')],
      {stdio: 'inherit'},
    );

    electronProcess.on('close', () => {
      rendererServer.close();
      preloadServer.close();
      mainServer.close();
      process.exit();
    });

    electronProcess.on('error', err => {
      console.error('Failed to start electron process.', err);
      rendererServer.close();
      preloadServer.close();
      mainServer.close();
      process.exit(1);
    });

    process.on('SIGTERM', () => {
      rendererServer.close();
      preloadServer.close();
      mainServer.close();
      electronProcess.kill();
      process.exit();
    });
  } catch (e) {
    console.error(e);
    process.exit(1);
  }
})();